#!/usr/bin/env bash
# Copyright (c) The mlkem-native project authors
# SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# consts
ROOT="$(realpath "$(dirname "$0")"/../)"
GITHUB_STEP_SUMMARY=${GITHUB_STEP_SUMMARY:-/dev/stdout}

checkerr()
{
  local code=$?
  local title="$1"
  local out="$2"
  local success=true
  if [[ $code == 127 ]]; then
    success=false
  fi

  if [[ ${#out} != 0 ]]; then
    echo "$out" | while read -r file line; do
      echo "::error file=$file,line=${line:-1},title=Format error::$file require to be formatted"
    done
    success=false
  fi

  if $success; then
    echo ":white_check_mark: $title" >>"$GITHUB_STEP_SUMMARY"
  else
    SUCCESS=false
    echo ":x: $title" >>"$GITHUB_STEP_SUMMARY"
  fi
}

# Formatting
SUCCESS=true

echo "::group::Linting nix files with nixpkgs-fmt"
checkerr "Lint nix" "$(nixpkgs-fmt --check "$ROOT")"
echo "::endgroup::"

echo "::group::Linting shell scripts with shfmt"
checkerr "Lint shell" "$(shfmt -s -l -i 2 -ci -fn $(shfmt -f $(git grep -l '' :/)))"
echo "::endgroup::"

echo "::group::Linting python scripts with black"
if ! diff=$(black --check --diff -q --include "(scripts/tests|scripts/simpasm|scripts/autogen|scripts/check-namespace|\.py$)" "$ROOT"); then
  echo "::error title=Format error::$diff"
  SUCCESS=false
  echo ":x: Lint python" >>"$GITHUB_STEP_SUMMARY"
else
  echo ":white_check_mark: Lint Python" >>"$GITHUB_STEP_SUMMARY"
fi
echo "::endgroup::"

echo "::group::Linting c files with clang-format"
checkerr "Lint C" "$(clang-format $(git ls-files ":/*.c" ":/*.h") --Werror --dry-run 2>&1 | grep "error:" | cut -d ':' -f 1,2 | tr ':' ' ')"
echo "::endgroup::"

check-eol-dry-run()
{
  for file in $(git ls-files -- ":/" ":/!:*.png"); do
    # Ignore symlinks
    if [[ ! -L $file && $(tail -c1 "$file" | wc -l) == 0 ]]; then
      l=$(wc -l <"$file")
      echo "$file $l"
    fi
  done
}
echo "::group::Checking eol"
checkerr "Check eol" "$(check-eol-dry-run)"
echo "::endgroup::"

check-spdx()
{
  local success=true
  for file in $(git ls-files -- ":/" ":/!:*.json" ":/!:*.png" ":/!:*LICENSE*" ":/!:.git*" ":/!:flake.lock"); do
    # Ignore symlinks
    if [[ ! -L $file && $(grep "SPDX-License-Identifier:" $file | wc -l) == 0 ]]; then
      echo "::error file=$file,line=${line:-1},title=Missing license header error::$file is missing SPDX License header"
      success=false
    fi
  done
  for file in $(git ls-files -- "*.[chsS]" "*.py" ":/!proofs/cbmc/*.py" ":/!examples/bring_your_own_fips202/custom_fips202/tiny_sha3/*" ":/!examples/custom_backend/mlkem_native/mlkem/fips202/native/custom/src/*"); do
    # Ignore symlinks
    if [[ ! -L $file && $(grep "Copyright (c) The mlkem-native project authors" $file | wc -l) == 0 ]]; then
      echo "::error file=$file,line=${line:-1},title=Missing copyright header error::$file is missing copyright header"
      success=false
    fi
  done

  if $success; then
    echo ":white_check_mark: Check SPDX + Copyright" >>"$GITHUB_STEP_SUMMARY"
  else
    SUCCESS=false
    echo ":x: Check SPDX + Copyright" >>"$GITHUB_STEP_SUMMARY"
  fi
}
echo "::group::Checking SPDX + Copyright headers"
check-spdx
echo "::endgroup::"

check-autogenerated-files()
{
  if python3 $ROOT/scripts/autogen --dry-run; then
    echo ":white_check_mark: Check native auto-generated files" >>"$GITHUB_STEP_SUMMARY"
  else
    echo ":x: Check native auto-generated files" >>"$GITHUB_STEP_SUMMARY"
    SUCCESS=false
  fi
}

echo "::group::Check native auto-generated files"
check-autogenerated-files
echo "::endgroup::"

check-magic()
{
  if python3 $ROOT/scripts/check-magic >/dev/null; then
    echo ":white_check_mark: Check magic constants" >>"$GITHUB_STEP_SUMMARY"
  else
    echo ":x: Check magic constants" >>"$GITHUB_STEP_SUMMARY"
    SUCCESS=false
  fi
}

echo "::group::Check magic constants"
check-magic
echo "::endgroup::"

if ! $SUCCESS; then
  exit 1
fi

check-contracts()
{
  if python3 $ROOT/scripts/check-contracts >/dev/null; then
    echo ":white_check_mark: Check contracts" >>"$GITHUB_STEP_SUMMARY"
  else
    echo ":x: Check contracts" >>"$GITHUB_STEP_SUMMARY"
    SUCCESS=false
  fi
}

echo "::group::Check contracts"
check-contracts
echo "::endgroup::"

if ! $SUCCESS; then
  exit 1
fi
